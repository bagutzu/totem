syntax = "proto3";
package totem;

import "github.com/kralicky/totem/extensions.proto";
import "google/protobuf/descriptor.proto";
import "google/rpc/status.proto";

option go_package = "github.com/kralicky/totem";

service ServerReflection {
  option (totem.visibility) = {
    splicedClients: true
  };

  rpc ListServices(DiscoveryRequest) returns (ServiceInfo);
}

message RPC {
  uint64 tag         = 1;
  string serviceName = 2;
  string methodName  = 3;
  oneof content {
    bytes               request         = 4;
    Response            response        = 5;
    ServerStreamMessage serverStreamMsg = 7;
  }
  MD metadata = 6;
}

message Response {
  bytes             response    = 1;
  google.rpc.Status statusProto = 2;
}

message MD {
  map<string, MDValues> data = 1;
}

message MDValues {
  repeated string items = 1;
}

message DiscoveryRequest {
  string          initiator     = 1;
  repeated string visited       = 2;
  int32           remainingHops = 3;
}

message ServiceInfo {
  repeated google.protobuf.ServiceDescriptorProto services = 1;
}

message ServerStreamMessage {
  // separate from rpc.metadata to disambiguate headers/trailers.
  // in a nested stream, rpc.metadata is always trailers.
  MD    headers  = 1;
  bytes response = 2;
}
