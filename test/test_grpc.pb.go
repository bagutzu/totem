// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - rag√π               v0.1.0
// source: test/test.proto

package totem_test

import (
	context "context"
	totem "github.com/kralicky/totem"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	TestStream(ctx context.Context, opts ...grpc.CallOption) (Test_TestStreamClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) TestStream(ctx context.Context, opts ...grpc.CallOption) (Test_TestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/totem_test.Test/TestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testTestStreamClient{stream}
	return x, nil
}

type Test_TestStreamClient interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ClientStream
}

type testTestStreamClient struct {
	grpc.ClientStream
}

func (x *testTestStreamClient) Send(m *totem.RPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testTestStreamClient) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	TestStream(Test_TestStreamServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) TestStream(Test_TestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_TestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).TestStream(&testTestStreamServer{stream})
}

type Test_TestStreamServer interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ServerStream
}

type testTestStreamServer struct {
	grpc.ServerStream
}

func (x *testTestStreamServer) Send(m *totem.RPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testTestStreamServer) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "totem_test.Test",
	HandlerType: (*TestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStream",
			Handler:       _Test_TestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test/test.proto",
}

// CToSClient is the client API for CToS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CToSClient interface {
	AskServer(ctx context.Context, in *CRequest, opts ...grpc.CallOption) (*SResponse, error)
}

type cToSClient struct {
	cc grpc.ClientConnInterface
}

func NewCToSClient(cc grpc.ClientConnInterface) CToSClient {
	return &cToSClient{cc}
}

func (c *cToSClient) AskServer(ctx context.Context, in *CRequest, opts ...grpc.CallOption) (*SResponse, error) {
	out := new(SResponse)
	err := c.cc.Invoke(ctx, "/totem_test.CToS/AskServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CToSServer is the server API for CToS service.
// All implementations must embed UnimplementedCToSServer
// for forward compatibility
type CToSServer interface {
	AskServer(context.Context, *CRequest) (*SResponse, error)
	mustEmbedUnimplementedCToSServer()
}

// UnimplementedCToSServer must be embedded to have forward compatible implementations.
type UnimplementedCToSServer struct {
}

func (UnimplementedCToSServer) AskServer(context.Context, *CRequest) (*SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskServer not implemented")
}
func (UnimplementedCToSServer) mustEmbedUnimplementedCToSServer() {}

// UnsafeCToSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CToSServer will
// result in compilation errors.
type UnsafeCToSServer interface {
	mustEmbedUnimplementedCToSServer()
}

func RegisterCToSServer(s grpc.ServiceRegistrar, srv CToSServer) {
	s.RegisterService(&CToS_ServiceDesc, srv)
}

func _CToS_AskServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CToSServer).AskServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/totem_test.CToS/AskServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CToSServer).AskServer(ctx, req.(*CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CToS_ServiceDesc is the grpc.ServiceDesc for CToS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CToS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "totem_test.CToS",
	HandlerType: (*CToSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskServer",
			Handler:    _CToS_AskServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/test.proto",
}

// SToCClient is the client API for SToC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SToCClient interface {
	AskClient(ctx context.Context, in *SRequest, opts ...grpc.CallOption) (*CResponse, error)
}

type sToCClient struct {
	cc grpc.ClientConnInterface
}

func NewSToCClient(cc grpc.ClientConnInterface) SToCClient {
	return &sToCClient{cc}
}

func (c *sToCClient) AskClient(ctx context.Context, in *SRequest, opts ...grpc.CallOption) (*CResponse, error) {
	out := new(CResponse)
	err := c.cc.Invoke(ctx, "/totem_test.SToC/AskClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SToCServer is the server API for SToC service.
// All implementations must embed UnimplementedSToCServer
// for forward compatibility
type SToCServer interface {
	AskClient(context.Context, *SRequest) (*CResponse, error)
	mustEmbedUnimplementedSToCServer()
}

// UnimplementedSToCServer must be embedded to have forward compatible implementations.
type UnimplementedSToCServer struct {
}

func (UnimplementedSToCServer) AskClient(context.Context, *SRequest) (*CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskClient not implemented")
}
func (UnimplementedSToCServer) mustEmbedUnimplementedSToCServer() {}

// UnsafeSToCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SToCServer will
// result in compilation errors.
type UnsafeSToCServer interface {
	mustEmbedUnimplementedSToCServer()
}

func RegisterSToCServer(s grpc.ServiceRegistrar, srv SToCServer) {
	s.RegisterService(&SToC_ServiceDesc, srv)
}

func _SToC_AskClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SToCServer).AskClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/totem_test.SToC/AskClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SToCServer).AskClient(ctx, req.(*SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SToC_ServiceDesc is the grpc.ServiceDesc for SToC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SToC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "totem_test.SToC",
	HandlerType: (*SToCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskClient",
			Handler:    _SToC_AskClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/test.proto",
}

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/totem_test.Calculator/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/totem_test.Calculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "totem_test.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/test.proto",
}
